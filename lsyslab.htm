<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <meta name="viewport" content="width=device-width" />

    <title>L-system lab 1.2</title>

    <style>
        body {
            font-size: .85em;
            font-family: "Segoe UI", Verdana, Helvetica, Sans-Serif;
            color: #232323;
            background-color: #fafafa;
        }

        header, footer, nav, section {
            display: block;
        }

        /* Styles for basic forms
        -----------------------------------------------------------*/
        fieldset {
            border: 1px solid #ddd;
            padding: 0 1.4em 1.4em 1.4em;
            margin: 0 0 1.5em 0;
        }

        legend {
            font-size: 1.2em;
            font-weight: bold;
        }

        textarea {
            min-height: 75px;
        }

        .editor-label {
            margin: 1em 0 0 0;
        }

        .editor-field {
            margin: 0.5em 0 0 0;
        }

        h1 {
            display: block;
            font-size: 2em;
            -webkit-margin-before: 0.67em;
            -webkit-margin-after: 0.67em;
            -webkit-margin-start: 0px;
            -webkit-margin-end: 0px;
            font-weight: bold;
        }

        h3 {
            display: block;
            font-size: 1.17em;
            -webkit-margin-before: 1em;
            -webkit-margin-after: 1em;
            -webkit-margin-start: 0px;
            -webkit-margin-end: 0px;
            font-weight: bold;
        }

        h4 {
            display: block;
            -webkit-margin-before: 1.33em;
            -webkit-margin-after: 1.33em;
            -webkit-margin-start: 0px;
            -webkit-margin-end: 0px;
            font-weight: bold;
        }

        p {
            display: block;
            -webkit-margin-before: 1em;
            -webkit-margin-after: 1em;
            -webkit-margin-start: 0px;
            -webkit-margin-end: 0px;
        }

        .header4 {
            padding: 2px 0px 2px 0px;
            margin: 2px 0px 2px 0px;
            color: gray;
        }

        button.fractalize {
            cursor: pointer;
            padding: 5px 15px;
            margin-top: 10px;
            background: gray;
            border: 1px solid #585858;
            -moz-border-radius: 10px;
            -webkit-border-radius: 10px;
            border-radius: 3px;
            -webkit-box-shadow: 0 0 2px rgba(0,0,0, .75);
            -moz-box-shadow: 0 0 2px rgba(0,0,0, .75);
            box-shadow: 0 0 2px rgba(0,0,0, .75);
            color: #f3f3f3;
            font-size: 1.1em;
        }

        input.my-inputs {
            padding: 5px 15px;
            background: #f3f3f3;
            border: 1px solid #585858;
            -moz-border-radius: 10px;
            -webkit-border-radius: 10px;
            border-radius: 3px;
            width: 5.5em;
            -webkit-box-shadow: 0 0 2px rgba(0,0,0, .75);
            -moz-box-shadow: 0 0 2px rgba(0,0,0, .75);
            box-shadow: 0 0 2px rgba(0,0,0, .75);
            color: #000000;
            font-size: 1.1em;
        }

        input.extra-width {
            width: 14.6em;
        }

        button.fractalize:hover {
            background-color: #898989;
            -webkit-box-shadow: 0 0 1px rgba(0,0,0, .75);
            -moz-box-shadow: 0 0 1px rgba(0,0,0, .75);
            box-shadow: 0 0 1px rgba(0,0,0, .75);
        }

        .loading {
            color: #bd2222;
            padding-top: 0px;
            margin-left: 5px;
            margin-top: 0px;
        }

        .done {
            color: #2ab731;
            padding-top: 0px;
            margin-left: 5px;
            margin-top: 0px;
        }

        .loading-div {
            padding-top: 10px;
        }

        #header {
            color: gray;
            margin: 0 auto 0 auto;
            text-align: center;
        }

        #footer {
            color: gray;
            margin: 0 auto 0 auto;
            text-align: center;
        }

        .menu {
            float: left;
            width: 260px;
            -webkit-box-shadow: 0 0 3px rgba(0,0,0, .75);
            -moz-box-shadow: 0 0 3px rgba(0,0,0, .75);
            box-shadow: 0 0 3px rgba(0,0,0, .75);
            padding: 5px;
            background-color: white;
        }

        .canvas-holder {
            float: left;
            width: auto;
            -webkit-box-shadow: 0 0 3px rgba(0,0,0, .75);
            -moz-box-shadow: 0 0 3px rgba(0,0,0, .75);
            box-shadow: 0 0 3px rgba(0,0,0, .75);
            background-color: white;
        }

        .menu-canvas-wrapper {
            width: 1800px;
            height: auto;
            margin-bottom: 2em;
        }

        .info {
            margin: 0px 2px 0px 2px;
            padding: 0px 2px 0px 2px;
            color: gray;
        }

        .rule2-holder {
            width: 200px;
        }

        .rule2-checkbox-label {
            margin: 0px 2px 0px 2px;
            padding: 0px 2px 0px 2px;
            color: gray;
        }

        .menu-options {
            width: 1795px;
            height: 45px;
            background-color: transparent;
        }

        .menu-options-button {
            margin-right: 0.0em;
        }

        .my-popup {
            width: 500px;
            height: 380px;
            position: absolute;
            top: 50%;
            left: 50%;
            margin: -150px 0 0 -250px; /* [-(height/2)px 0 0 -(width/2)px] */
            padding: 1em;
            display: none;
            background: rgba(0,0,0, .8);
        }

        .loading-popup {
            width: 102px;
            height: 30px;
            position: absolute;
            top: 50%;
            left: 50%;
            margin: -15px 0 0 -48px; /* [-(height/2)px 0 0 -(width/2)px] */
            padding: 0;
            display: none;
            background: rgba(0,0,0, .8);
        }

        .close-poppup {
            float: right;
            border: none;
            background-color: white;
            cursor: pointer;
        }

            .close-poppup:hover {
                float: right;
                border: none;
                background-color: #f3f3f3;
                cursor: pointer;
            }

        p.text-rendering {
            color: white;
            padding: 2px 5px 0px 5px;
            margin: 0;
            font-size: 1.3em;
        }

        h4.stats{
            padding: 0px 0px 2px 2px;
            margin: 0px 0px 2px 2px;
            color: #83d53b;
            position:absolute; 
            display: block;
            font-weight: normal !important;
            pointer-events:none !important;
        }

        .second-stat{
            margin-top:1.2em !important;
        }
    </style>

</head>

<body>
    <div id="loading-popup" class="loading-popup"><p class="text-rendering">Rendering...</p></div>
    <div id="popup" class="my-popup">
        <button class="close-poppup" onclick="CloseAbout()">X</button>
        <h3 class="header4" style="color:white">Author </h3>
        <p style="color:white">Lyubomir Dimitrov Stoychev</p>
        <h3 class="header4" style="color:white">Rules </h3>
        <p style="color:white"> F = Draw straight; Minus = Turn anti-clockwise; Plus = Turn clockwise; X does not correspond to any drawing action and is used to control the evolution of the curve.</p>
        <p style="color:white"> [ corresponds to saving the current values for position and angle, which are restored when the corresponding ] is executed.</p>
        <h3 class="header4" style="color:white">About </h3>
        <p style="color:white" class="about-info">
            This tool is intended for experimenting with L-systems defined by up to 2 rules. Calculation of huge L-systems will be rendered slower or may freeze your browser.
            Code for handling such cases is not implemented in the current version.
        </p>
        <p id="footer" style="color:white">L-system Lab V1.2 You are allowed to copy, distribute and modify the source as you wish. Just remember to give reference to the source.</p> 
        </br>
        <p id="footer" style="color:white">2016</p>
    </div>

    <h1 id="header">Welcome to L-system Lab 1.2</h1>

    <h3 class="header4">What are you waiting for? Plant a seed and examine the beauty and complexity that will arise.</h3>

    <div class="menu-canvas-wrapper">

        <div class="menu-options">

            <button class="fractalize menu-options-button" onclick="KochCurve()">Koch Curve</button>
            <button class="fractalize menu-options-button" onclick="LevyCurve()">Levy C Curve</button>
            <button class="fractalize menu-options-button" onclick="Tree()">Tree</button>
            <button class="fractalize menu-options-button" onclick="Other1()">Other 1</button>
            <button class="fractalize menu-options-button" onclick="Other2()">Other 2</button>
            <button class="fractalize menu-options-button" onclick="About()">About</button>
        </div>
        <div class="menu">

            <h3 class="header4">Settings</h3>
            <h4 class="header4">Rule 1 </h4>

            <div style="width:500px">
                <input id="seed1" class="my-inputs extra-width" type="text" value="+F--F+" required=required />
            </div>

            <div style="width:100px;">
                <h4 class="header4">Rule 2 </h4>
                <input id="rule2_select" onclick="ChangeInputBoxState()" type="checkbox" />
                <label class="rule2-checkbox-label" id="rule2-checkbox-label">Disabled</label>

            </div>

            <div style="width:500px;">
                <input id="seed2" class="my-inputs extra-width" type="text" value="FF" required=required readonly=readonly />
            </div>

            <h4 class="header4">Angle to turn </h4>
            <input id="angle" class="my-inputs" type="number" value="45" min="0" max="360" required=required />
            <h4 class="header4">Drawing line length</h4>
            <input id="pix-per-dot" class="my-inputs" type="number" value="10" min="1" max="200" required=required />
            <h4 class="header4">Iterations </h4>
            <input id="ittr" class="my-inputs" type="number" value="9" min="1" max="100" required=required />

            <div id="color-wheel-container">
                <h4 class="header4">Color wheel 0-360</h4>
                <input id="color" onclick="ChangeColorState()" type="checkbox" />
                <label class="rule2-checkbox-label" id="color-checkbox-label">Disabled</label>
                <div style="width:500px;">
                    <input id="hsf-value1" class="my-inputs" type="number" value="0" min="0" max="360" required=required readonly=readonly />
                    <label class="rule2-checkbox-label">-</label>
                    <input id="hsf-value2" class="my-inputs" type="number" value="360" min="0" max="360" required=required readonly=readonly />
                </div>
            </div>

            <h4 class="header4">Randomize angle between 0-360</h4>
            <input id="angle-state" onclick="ChangeRandomizeAngleState()" type="checkbox" />
            <label class="rule2-checkbox-label" id="randomize-angle-checkbox-label">Disabled</label>
            <div style="width:500px;">
                <input id="randomize-angle-value1" class="my-inputs" type="number" value="35" min="0" max="360" required=required readonly=readonly />
                <label class="rule2-checkbox-label">-</label>
                <input id="randomize-angle-value2" class="my-inputs" type="number" value="45" min="0" max="360" required=required readonly=readonly />
            </div>

            <h3 class="header4">Starting coordinates</h3>
            <p class="info">Click on the canvas to select the starting coordinates</p>
            <h4 class="header4">Offset X </h4>
            <input id="offset-x" class="my-inputs" type="number" value="500" required=required />
            <h4 class="header4">Offset Y </h4>
            <input id="offset-y" class="my-inputs" type="number" value="250" required=required />

            <h4 class="header4">Pretty mode (it takes longer to render)</h4>
            <input id="pretty-mode" onclick="ChangeRenderMode()" type="checkbox" checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked checked=checked />
            <label class="rule2-checkbox-label" id="pretty-mode-label">Enabled</label>

            <br />

            <button class="fractalize" style="float:none" onclick="Fractalize()">Render</button>
        </div>

        <div class="canvas-holder" style="background-color:white;">
            <h4 class="stats" id="time-to-render">Render time: </h4>
            <h4 class="stats second-stat" id="num-of-instructions">Instructions: </h4>
            <canvas id="canvas" width="1500" height="800" tabindex="0"></canvas>
        </div>

    </div>
    <script>

        'use strict';

        window.onload = function () {

            Fractalize();
        }

        function Loading() {
            document.getElementById("loading-popup").style.display = "block";
        }

        var DoneLoading = function (timeBegin) {

            document.getElementById("loading-popup").style.display = "none";
            document.getElementById("time-to-render").innerHTML = "Render time: " + (Date.now() - timeBegin) / 1000 + " sec";
            document.getElementById("num-of-instructions").innerHTML = "Instructions: " + fractral_str.length;
        }

        function About() {
            var popup = document.getElementById("popup");
            popup.style.display = 'block';
        }

        function CloseAbout() {
            var popup = document.getElementById("popup");
            popup.style.display = 'none';
        }

        function ResetForRule1() {

            document.getElementById("randomize-angle-value1").value = 35;
            document.getElementById("randomize-angle-value2").value = 45;
            document.getElementById("randomize-angle-checkbox-label").innerHTML = "Disabled";
            document.getElementById("randomize-angle-value1").readOnly = true;
            document.getElementById("randomize-angle-value2").readOnly = true;
            document.getElementById("angle-state").checked = false;

            //colors hsf-value1
            document.getElementById("hsf-value1").value = 0;
            document.getElementById("hsf-value2").value = 360;
            document.getElementById("color-checkbox-label").innerHTML = "Disabled";
            document.getElementById("hsf-value1").readOnly = true;
            document.getElementById("hsf-value2").readOnly = true;
            document.getElementById("color").checked = false;

            document.getElementById("rule2-checkbox-label").innerHTML = "Disabled";
            document.getElementById("seed2").readOnly = true;
            document.getElementById("rule2_select").checked = false;

            randomAngle = false;
        }

        function KochCurve() {
            document.getElementById("ittr").value = 5;
            document.getElementById("pix-per-dot").value = 1;
            document.getElementById("angle").value = 90;
            document.getElementById("offset-y").value = 500;
            document.getElementById("offset-x").value = 200;
            document.getElementById("seed1").value = "F-F+F+F-F";
            document.getElementById("seed2").value = "FF";
            ResetForRule1();

            Fractalize();
        }

        function LevyCurve() {

            document.getElementById("ittr").value = 9;
            document.getElementById("pix-per-dot").value = 10;
            document.getElementById("angle").value = 45;
            document.getElementById("offset-y").value = 250;
            document.getElementById("offset-x").value = 500;
            document.getElementById("seed1").value = "+F--F+";
            document.getElementById("seed2").value = "FF";
            ResetForRule1();

            Fractalize();
        }

        function Tree() {

            document.getElementById("ittr").value = 6;
            document.getElementById("pix-per-dot").value = 1;
            document.getElementById("angle").value = 28;
            document.getElementById("offset-y").value = 800;
            document.getElementById("offset-x").value = 500;
            document.getElementById("seed1").value = "F-[[X]+X]+F[+FX]-X";
            document.getElementById("seed2").value = "FF";
            document.getElementById("rule2-checkbox-label").innerHTML = "Enabled";
            document.getElementById("seed2").readOnly = false;
            document.getElementById("rule2_select").checked = true;
            randomAngle = true;

            //angle randomization
            document.getElementById("randomize-angle-value1").value = 20;
            document.getElementById("randomize-angle-value2").value = 30;
            document.getElementById("randomize-angle-checkbox-label").innerHTML = "Enabled";
            document.getElementById("randomize-angle-value1").readOnly = false;
            document.getElementById("randomize-angle-value2").readOnly = false;
            document.getElementById("angle-state").checked = true;

            //colors hsf-value1
            document.getElementById("hsf-value1").value = 35;
            document.getElementById("hsf-value2").value = 60;
            document.getElementById("color-checkbox-label").innerHTML = "Enabled";
            document.getElementById("hsf-value1").readOnly = false;
            document.getElementById("hsf-value2").readOnly = false;
            document.getElementById("color").checked = true;

            Fractalize();
        }

        function Other1() {
            document.getElementById("ittr").value = 6;
            document.getElementById("pix-per-dot").value = 1;
            document.getElementById("angle").value = 70;
            document.getElementById("offset-y").value = 200;
            document.getElementById("offset-x").value = 200;
            document.getElementById("seed1").value = "F+F--F+F";
            document.getElementById("seed2").value = "FF";
            ResetForRule1();

            Fractalize();
        }

        function Other2() {
            document.getElementById("ittr").value = 14;
            document.getElementById("pix-per-dot").value = 2;
            document.getElementById("angle").value = 58;
            document.getElementById("offset-y").value = 400;
            document.getElementById("offset-x").value = 500;
            document.getElementById("seed1").value = "+FF+";
            document.getElementById("seed2").value = "FF";
            ResetForRule1();

            Fractalize();
        }

        //ALL TRIVIAL SHIZZLE GOES HERE

        function ValidateFields() {


            var offsetX_val = parseInt(document.getElementById("offset-x").value);
            var offsetY_val = parseInt(document.getElementById("offset-y").value);

            var seed1 = document.getElementById("seed1").value;
            var seed2 = document.getElementById("seed2").value;

            var angle_val = parseInt(document.getElementById("angle").value);
            var pix_per_dot_val = parseInt(document.getElementById("pix-per-dot").value);
            var num_of_itterations_val = parseInt(document.getElementById("ittr").value);

            var hsf_val1 = parseInt(document.getElementById("hsf-value1").value);
            var hsf_val2 = parseInt(document.getElementById("hsf-value2").value);

            var randomize_angle_value1 = parseInt(document.getElementById("randomize-angle-value1").value);
            var randomize_angle_value2 = parseInt(document.getElementById("randomize-angle-value2").value);

            var allowed_chars = "F+-[]X";

            var i;

            //illegal chars validation
            for (i = 0; i < seed1.length; i++) {
                if (allowed_chars.indexOf(seed1[i]) === -1) {
                    alert("Illegal seed characters detected. Allowed characters: F, +, -, X, [, ]");
                    return false;
                }
            }

            for (i = 0; i < seed2.length; i++) {
                if (allowed_chars.indexOf(seed2[i]) === -1) {
                    alert("Illegal seed characters detected. Allowed characters: F, +, -, X, [, ]");
                    return false;
                }
            }

            //angle validation
            if (angle_val < 0 || angle_val > 360 || isNaN(angle_val)) {
                alert("Angle has to be between 0 and 360 degrees");
                return false;
            }

            //hsf validation
            if (hsf_val1 < 0 || hsf_val1 > 360 || hsf_val2 < 0 || hsf_val2 > 360 || isNaN(hsf_val1) || isNaN(hsf_val2)) {
                alert("Color wheel values have to be between 0 and 360 degrees");
                return false;
            }

            if (hsf_val1 > hsf_val2)
                alert("Color wheel value 1 needs to be lower than value 2");

            //randomize angle validation
            if (randomize_angle_value1 < 0 || randomize_angle_value1 > 360 || randomize_angle_value2 < 0 || randomize_angle_value2 > 360 || isNaN(randomize_angle_value1) || isNaN(randomize_angle_value2)) {
                alert("Randomize angle values have to be between 0 and 360 degrees");
                return false;
            }

            if (randomize_angle_value1 > randomize_angle_value2)
                alert("Randomize angle value 1 needs to be lower than value 2");

            //drawing line validation
            if (pix_per_dot_val < 0 || pix_per_dot_val > 200 || isNaN(pix_per_dot_val)) {
                alert("Pixels per dot value has to be between 1 and 200");
                return false;
            }

            //itterations validation
            if (num_of_itterations_val < 0 || num_of_itterations_val > 14 || isNaN(num_of_itterations_val)) {
                alert("Iterations value has to be between 1 and 14");
                return false;
            }

            if (seed1.length > 20 || seed2.length > 20) {
                alert("A seed value is too long");
                return false;
            }

            if (isNaN(offsetX_val) || offsetX_val < 0) {
                alert("Illegal offset X value");
                return false;
            }

            if (isNaN(offsetY_val) || offsetY_val < 0) {
                alert("Illegal offset Y value");
                return false;
            }

            return true;
        }

        //ON-OFF states
        function ChangeRenderMode() {

            prettyMode = document.getElementById("pretty-mode").checked;

            if (prettyMode) {
                document.getElementById("pretty-mode-label").innerHTML = "Enabled";
                document.getElementById("color-wheel-container").style.display = "block";
            } else {
                document.getElementById("pretty-mode-label").innerHTML = "Disabled";
                document.getElementById("color-wheel-container").style.display = "none";
            }

            Fractalize();
        }

        function ChangeRandomizeAngleState() {

            randomAngle = document.getElementById("angle-state").checked;

            document.getElementById("randomize-angle-value1").readOnly = !randomAngle;
            document.getElementById("randomize-angle-value2").readOnly = !randomAngle;

            if (randomAngle) {
                document.getElementById("randomize-angle-checkbox-label").innerHTML = "Enabled";
            } else {
                document.getElementById("randomize-angle-checkbox-label").innerHTML = "Disabled";
            }
        }

        function ChangeColorState() {
            var color_state = document.getElementById("color").checked;

            document.getElementById("hsf-value1").readOnly = !color_state;
            document.getElementById("hsf-value2").readOnly = !color_state;

            if (color_state) {
                document.getElementById("color-checkbox-label").innerHTML = "Enabled";
            } else {
                document.getElementById("color-checkbox-label").innerHTML = "Disabled";
            }
        }

        function ChangeInputBoxState() {

            var rule_2_state = document.getElementById("rule2_select").checked;

            document.getElementById("seed2").readOnly = !rule_2_state;

            //reset to default
            if (rule_2_state) {
                document.getElementById("ittr").value = 6;
                document.getElementById("pix-per-dot").value = 1;
                document.getElementById("angle").value = 28;
                document.getElementById("offset-y").value = 800;
                document.getElementById("offset-x").value = 500;
                document.getElementById("seed1").value = "F-[[X]+X]+F[+FX]-X";
                document.getElementById("seed2").value = "FF";
                document.getElementById("rule2-checkbox-label").innerHTML = "Enabled";
            }
            else {
                document.getElementById("ittr").value = 9;
                document.getElementById("pix-per-dot").value = 10;
                document.getElementById("angle").value = 45;
                document.getElementById("offset-y").value = 250;
                document.getElementById("offset-x").value = 500;
                document.getElementById("seed1").value = "+F--F+";
                document.getElementById("seed2").value = "FF";
                document.getElementById("rule2-checkbox-label").innerHTML = "Disabled";
            }
        }

        //This is the main method
        function Fractalize() {

            var timeBegin = Date.now();

            //if it fails to validate, break out of the main
            if (!ValidateFields()) return;

            if (document.getElementById("rule2_select").checked) {
                t = DegToRad(-90);
            } else {
                t = 0;
            }

            randFrom = parseInt(document.getElementById("randomize-angle-value1").value);
            randTo = parseInt(document.getElementById("randomize-angle-value2").value);

            var offsetX_val = parseInt(document.getElementById("offset-x").value);
            var offsetY_val = parseInt(document.getElementById("offset-y").value);

            var seed1_val = document.getElementById("seed1").value;
            var seed2_val = document.getElementById("seed2").value;

            angle = DegToRad(parseInt(document.getElementById("angle").value));
            pix_per_dot = parseInt(document.getElementById("pix-per-dot").value);
            var num_of_itterations_val = parseInt(document.getElementById("ittr").value);

            if (prettyMode)
                isMultiColored = document.getElementById("color").checked;
            else
                isMultiColored = false;

            //check if values have changed if not use the previosly generated string else render new string
            if (seed1 != seed1_val || seed2 != seed2_val || num_of_itterations != num_of_itterations_val) {

                seed1 = seed1_val;
                seed2 = seed2_val;

                num_of_itterations = num_of_itterations_val;
                fractral_str = GetFractalString(seed1, seed2, num_of_itterations);
            }

            if (offsetX_val != offsetX || offsetY != offsetY_val) {
                offsetX = offsetX_val;
                offsetY = offsetY_val;
            }

            //360 - HSF
            factor = ((parseInt(document.getElementById("hsf-value2").value) - parseInt(document.getElementById("hsf-value1").value)) / fractral_str.length);
            colorValueFrom = parseFloat(document.getElementById("hsf-value1").value);

            Loading();

            setTimeout(function () {

                Draw();
                DoneLoading(timeBegin);

            }, 10);
            
        }

        //ALL CANVAS SHIZZLE GOES HERE
        var randomAngle = false;
        var prettyMode = true;

        var offsetX = 0;
        var offsetY = 0;

        var t = DegToRad(-90);
        var angle = 0;
        var pix_per_dot = 0;

        var seed1 = "";
        var seed2 = "";

        var num_of_itterations = 0;

        var tmpX = 0;
        var tmpY = 0;

        var c = document.getElementById("canvas");
        var ctx = c.getContext("2d");

        //Get Canvas Coordinates on click

        canvas.addEventListener("mousedown", getPosition, false);

        function getPosition(e) {

            var x;
            var y;

            if (e.pageX || e.pageY) {
                x = e.pageX;
                y = e.pageY;
            }
            else {
                x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
            }

            x -= c.offsetLeft;
            y -= c.offsetTop;

            document.getElementById("offset-x").value = x;
            document.getElementById("offset-y").value = y;
        }



        //Draw a line from posX,posY to posXto, posYto
        var DrawPrettyLine = function (posX, posY, posXto, posYto) {

            ctx.beginPath();
            ctx.moveTo(posX + offsetX, posY + offsetY);
            ctx.lineTo(posXto + offsetX, posYto + offsetY);
            ctx.stroke();
        }

        var DrawFastLine = function (posX, posY, posXto, posYto) {

            ctx.moveTo(posX + offsetX, posY + offsetY);
            ctx.lineTo(posXto + offsetX, posYto + offsetY);
        }

        //get random number inclusive of min / max
        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        //Polar to rectengular coordination
        function PolarToRect(R, t) {
            var x = R * Math.cos(t);
            var y = R * Math.sin(t);

            return {
                x: x,
                y: y
            }
        }

        //Degrees to radians
        function DegToRad(deg) {
            return (Math.PI / 180) * deg;
        }

        var DrawLine;

        function ClearCanvas() {

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (prettyMode) {
                InitPrettyCanvas();
                DrawLine = DrawPrettyLine;
            }
            else {
                InitFastCanvas();
                DrawLine = DrawFastLine;
            }
        }

        function InitPrettyCanvas() {
            ctx.strokeStyle = "lightgray";
            ctx.shadowColor = "black";
            ctx.shadowOffsetX = 0.3;
            ctx.shadowOffsetY = 0.3;
            ctx.shadowBlur = 0.4;
        }

        function InitFastCanvas() {
            ctx.strokeStyle = "darkgray";
        }

        var fractral_str = "";

        //Generate the rednder string
        function GetFractalString(seed1, seed2, iti) {

            var is_rule_2_used = document.getElementById("rule2_select").checked;

            var init = seed1;

            var gen_val = "";

            var tmp_seed = "";

            if (is_rule_2_used)
                tmp_seed = seed2;
            else
                tmp_seed = seed1;

            for (var j = 0; j < iti; j++) {

                var i;

                if (is_rule_2_used) {
                    for (i = 0; i < init.length; i++) {

                        if (init[i] == 'X') {
                            gen_val += seed1;
                        } else {
                            gen_val += init[i];
                        }
                    }

                    init = gen_val;
                    gen_val = "";
                }

                for (i = 0; i < init.length; i++) {
                    if (init[i] == 'F') {
                        gen_val += tmp_seed;
                    } else {
                        gen_val += init[i];
                    }
                }

                init = gen_val;
                gen_val = "";
            }

            return init;
        }

        //Draw() related vars
        var randFrom = 0;
        var randTo = 0;

        var factor = 0;

        var colorValueTo = 0;
        var colorValueFrom = 0;

        var isMultiColored = false;

        var old_vals = [];

        function Draw() {

            ClearCanvas();

            if (!prettyMode)
                ctx.beginPath();

            colorValueTo = 0;
            tmpX = 0;
            tmpY = 0;

            for (var i = 0; i < fractral_str.length; i++) {

                if (isMultiColored) {

                    colorValueTo += factor;
                    ctx.strokeStyle = "hsl(" + (colorValueFrom + colorValueTo) + ",50%,50%)";
                }

                switch (fractral_str[i]) {

                    case '-':

                        if (randomAngle)
                            t -= DegToRad(getRandomInt(randFrom, randTo));
                        else
                            t -= angle;
                        break;

                    case '+':

                        if (randomAngle)
                            t += DegToRad(getRandomInt(randFrom, randTo));
                        else
                            t += angle;
                        break;

                    case '[':

                        var old_val = {
                            x: tmpX,
                            y: tmpY,
                            t: t
                        }
                        old_vals.push(old_val);
                        break;

                    case ']':

                        var old_val = old_vals.pop();
                        t = old_val.t;
                        tmpX = old_val.x;
                        tmpY = old_val.y;
                        break;

                    case 'F':

                        var rectCoordinates = PolarToRect(pix_per_dot, t);
                        DrawLine(tmpX, tmpY, rectCoordinates.x + tmpX, rectCoordinates.y + tmpY);
                        tmpX = rectCoordinates.x + tmpX;
                        tmpY = rectCoordinates.y + tmpY;
                        break;
                }
            }

            if (!prettyMode) 
                ctx.stroke();
        }

    </script>
</body>
</html>
